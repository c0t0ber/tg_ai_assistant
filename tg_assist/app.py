import logging
from typing import cast

import pydantic.dataclasses
import pydantic_settings
from google.generativeai import GenerativeModel  # type: ignore[attr-defined]
from pydantic import ConfigDict
from telethon import TelegramClient
from telethon.tl.custom import Dialog
from telethon.tl.custom import Message as TelegramMessage
from telethon.tl.functions.messages import GetDialogFiltersRequest
from telethon.tl.types import DialogFilter, TypeChat, TypeInputPeer, TypeUser
from telethon.tl.types.messages import DialogFilters
from telethon.utils import get_peer_id
from tqdm.auto import tqdm

from tg_assist.utils.telegram_auth_helper import get_telegram_code_from_request

logger = logging.getLogger(__name__)

TELEGRAM_MESSAGE_LIMIT = 4000  # –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞ Telegram (4096)


@pydantic.dataclasses.dataclass
class Message:
    message_content: str
    message_id: int
    message_link: str


@pydantic.dataclasses.dataclass(config=ConfigDict(arbitrary_types_allowed=True))
class ParsedDialog:  # type: ignore[misc]
    chat_title: str
    unread_count: int
    unread_messages: list[Message]
    telegram_peer: TypeInputPeer


@pydantic.dataclasses.dataclass(config=ConfigDict(arbitrary_types_allowed=True))
class Folder:  # type: ignore[misc]
    folder_id: int
    folder_title: str
    included_chats: list[TypeInputPeer]


def create_telegram_message_link(chat_entity: TypeChat | TypeUser, message_id: int) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram

    Args:
        chat_entity: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        if hasattr(chat_entity, "username") and chat_entity.username:
            # –ü—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç —Å username
            return f"https://t.me/{chat_entity.username}/{message_id}"
        else:
            # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
            raw_chat_id = get_peer_id(chat_entity)
            chat_id_string = str(raw_chat_id)

            if chat_id_string.startswith("-100"):
                chat_link_id = chat_id_string[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100
            elif chat_id_string.startswith("-"):
                chat_link_id = chat_id_string[1:]  # –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å
            else:
                chat_link_id = chat_id_string

            return f"https://t.me/c/{chat_link_id}/{message_id}"
    except Exception as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {error}")
        return f"Message ID: {message_id}"


def split_message_into_chunks(text: str, max_chunk_size: int) -> list[str]:
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        max_chunk_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏

    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    message_chunks = []
    current_chunk = ""

    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    text_lines = text.split("\n")

    for text_line in text_lines:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ —Å–ø–∏—Å–æ–∫
        if len(current_chunk + text_line + "\n") > max_chunk_size:
            if current_chunk:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                message_chunks.append(current_chunk)
                current_chunk = text_line + "\n"
            else:
                # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
                # –†–∞–∑–±–∏–≤–∞–µ–º –µ–µ –Ω–∞ —á–∞—Å—Ç–∏
                while len(text_line) > max_chunk_size:
                    message_chunks.append(text_line[:max_chunk_size])
                    text_line = text_line[max_chunk_size:]
                current_chunk = text_line + "\n"
        else:
            current_chunk += text_line + "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if current_chunk:
        message_chunks.append(current_chunk)

    return message_chunks


def format_summary_message(summary_text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    Args:
        summary_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    return f"""
# üìù –°–≤–æ–¥–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

{summary_text}

_–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TG Assist_
"""


def process_telegram_message(
    telegram_message: TelegramMessage, chat_entity: TypeChat | TypeUser
) -> Message:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram

    Args:
        telegram_message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram
        chat_entity: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message_link = create_telegram_message_link(chat_entity, telegram_message.id)
    return Message(telegram_message.text, telegram_message.id, message_link)


class TelegramSummarizer:
    def __init__(
        self,
        telegram_api_id: int,
        telegram_api_hash: str,
        user_phone_number: str,
        session_name: str,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            telegram_api_id: API ID –∏–∑ Telegram Developer Tools
            telegram_api_hash: API Hash –∏–∑ Telegram Developer Tools
            user_phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_name: –ò–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ Telegram
        """
        self.user_phone_number = user_phone_number
        self.client = TelegramClient(session_name, telegram_api_id, telegram_api_hash)
        self.model = GenerativeModel("gemini-2.0-flash-thinking-exp-01-21")
        self.summarization_prompt_template = """
–¢—ã –º–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ—à—å —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç—ã. 
–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤ –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏—Ö –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ —è –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É, –≤—ã–¥–µ–ª—è—è —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–µ –º—ã—Å–ª–∏ 
–¢–∞–∫ –∂–µ –Ω–µ –Ω—É–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –∫–∏–¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ü–∏—à–∏ —Ç–∞–∫, –∏—Å–ø–æ–ª–∑—É–π –∫–∞–∫ —à–∞–±–ª–æ–Ω:
<–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¢–∞–π—Ç–ª –∫–∞–Ω–∞–ª–∞> - –µ—Å–ª–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–≤–ª—è–π –ø–æ–¥ –æ–¥–Ω–∏–º —Ç–∞–π—Ç–ª–æ–º –∏ –≤—Å–µ     
<–°–∞–º–∞—è –≥–ª–∞–≤–Ω–æ—è —Å—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ —á–µ–º –æ–Ω–æ, –Ω–µ –±–æ–ª—å—à–µ 10 —Å–ª–æ–≤> - <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ> 
<–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 2—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π>

–î–∞–ª–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"""

    async def run(self, folder_id: int, result_output_tg_entity: str) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏

        Args:
            folder_id: ID –ø–∞–ø–∫–∏ –≤ Telegram —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            result_output_tg_entity: ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
        """
        await self.client.start(self.user_phone_number, code_callback=get_telegram_code_from_request)
        logger.info("Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        output_chat_entity = await self.client.get_entity(result_output_tg_entity)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {output_chat_entity.id}")

        try:
            summary_text = await self._get_unread_chats(folder_id)
            await self._send_summary_to_telegram(summary_text, output_chat_entity)
        finally:
            await self.client.disconnect()
            logger.info("Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω")

    async def _get_folders(self) -> dict[int, Folder]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–ø–æ–∫ (—Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤) Telegram

        Returns:
            –°–ª–æ–≤–∞—Ä—å –ø–∞–ø–æ–∫ —Å ID –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π
        """
        dialog_filters_response: DialogFilters = await self.client(GetDialogFiltersRequest())
        telegram_folders: dict[int, Folder] = {}

        for dialog_filter in dialog_filters_response.filters:
            if isinstance(dialog_filter, DialogFilter):
                telegram_folders[dialog_filter.id] = Folder(
                    dialog_filter.id, dialog_filter.title.text, dialog_filter.include_peers
                )

        return telegram_folders

    async def _parse_dialog(self, telegram_dialog: Dialog) -> ParsedDialog:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            telegram_dialog: –û–±—ä–µ–∫—Ç –¥–∏–∞–ª–æ–≥–∞ –∏–∑ Telethon

        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        """
        chat_title = telegram_dialog.title
        message_limit = telegram_dialog.unread_count
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞: {chat_title}, –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {message_limit}")

        parsed_messages = []

        if telegram_dialog.unread_count >= 20:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            logger.warning(
                f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ({telegram_dialog.unread_count}), –¥–ª—è —á–∞—Ç–∞ {chat_title}, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é –¥–æ 20"
            )
            message_limit = 20

        messages = await self.client.get_messages(telegram_dialog.entity, limit=message_limit)
        chat_entity = await self.client.get_entity(telegram_dialog.entity)

        for telegram_message in messages:
            try:
                parsed_message = process_telegram_message(telegram_message, chat_entity)
            except Exception as error:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({telegram_message.to_dict()}): {error}")
                continue
            parsed_messages.append(parsed_message)

        return ParsedDialog(chat_title, telegram_dialog.unread_count, parsed_messages, telegram_dialog.input_entity)

    async def _summarize_with_gemini(self, unread_dialogs: list[ParsedDialog]) -> str:
        """
        –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Google Gemini

        Args:
            unread_dialogs: –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏

        Returns:
            –¢–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        """
        complete_prompt = self.summarization_prompt_template
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é {len(unread_dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")

        for dialog in unread_dialogs:
            formatted_messages = ""
            for message in dialog.unread_messages:
                formatted_messages += (
                    f"msg id {message.message_id}\n {message.message_content}\n link: {message.message_link}\n\n"
                )

            complete_prompt += f"""\n
{dialog.chat_title} ({dialog.unread_count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π):
{formatted_messages}\n\n     
"""

        logger.info("–ó–∞–ø—Ä–æ—Å –∫ Gemini API –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
        gemini_response = self.model.generate_content(complete_prompt)
        return cast(str, gemini_response.text)

    async def _get_unread_chats(self, folder_id: int) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏

        Args:
            folder_id: ID –ø–∞–ø–∫–∏ –≤ Telegram

        Returns:
            –¢–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏

        Raises:
            ValueError: –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        telegram_folders = await self._get_folders()
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω—ã –ø–∞–ø–∫–∏: {[(folder.folder_title, folder.folder_id) for folder in telegram_folders.values()]}"
        )

        if folder_id not in telegram_folders:
            error_msg = f"–ü–∞–ø–∫–∞ —Å ID {folder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            logger.error(error_msg)
            raise ValueError(error_msg)

        selected_folder = telegram_folders[folder_id]
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {selected_folder.folder_title} (ID: {selected_folder.folder_id})")

        unread_dialogs: list[ParsedDialog] = []

        async for telegram_dialog in tqdm(self.client.iter_dialogs(), desc="–ß–∏—Ç–∞—é –≤–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏", unit="–î–∏–∞–ª–æ–≥"):
            if telegram_dialog.input_entity in selected_folder.included_chats:
                if telegram_dialog.unread_count > 0:
                    processed_dialog = await self._parse_dialog(telegram_dialog)
                    unread_dialogs.append(processed_dialog)

        if not unread_dialogs:
            error_msg = f"–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ {selected_folder.folder_title}"
            logger.warning(error_msg)
            raise ValueError(error_msg)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unread_dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")

        return await self._summarize_with_gemini(unread_dialogs)

    async def _send_summary_to_telegram(self, summary_text: str, chat_id: TypeChat) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            summary_text: –¢–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """

        complete_summary_message = format_summary_message(summary_text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(complete_summary_message) <= TELEGRAM_MESSAGE_LIMIT:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –±–ª–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç {chat_id}")
            await self.client.send_message(
                chat_id,
                complete_summary_message,
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
            logger.info("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏")

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await self.client.send_message(
                chat_id,
                "# üìù –°–≤–æ–¥–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            )

            # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            message_chunks = split_message_into_chunks(summary_text, TELEGRAM_MESSAGE_LIMIT)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏
            for chunk_index, message_chunk in enumerate(message_chunks):
                chunk_content = message_chunk

                # –ö –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–ª–æ–∫—É –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                if chunk_index == len(message_chunks) - 1:
                    chunk_content += "\n_–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TG Assist_"

                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {chunk_index + 1}/{len(message_chunks)}")
                await self.client.send_message(chat_id, chunk_content, parse_mode="md")

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(message_chunks)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç {chat_id}")


class Settings(pydantic_settings.BaseSettings):  # type: ignore[explicit-any]
    telegram_api_id: int
    telegram_api_hash: str
    telegram_phone: str
    google_api_key: str
    session_name: str
    folder_id: int
    result_output_tg_entity: str


async def start_tg_assist() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    config = Settings()

    telegram_summarizer = TelegramSummarizer(
        user_phone_number=config.telegram_phone,
        telegram_api_id=config.telegram_api_id,
        telegram_api_hash=config.telegram_api_hash,
        session_name=config.session_name,
    )

    await telegram_summarizer.run(folder_id=config.folder_id, result_output_tg_entity=config.result_output_tg_entity)
    logger.info("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
